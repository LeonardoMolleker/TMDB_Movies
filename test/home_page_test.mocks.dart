// Mocks generated by Mockito 5.0.10 from annotations
// in tmdb_movies/test/home_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tmdb_movies/bloc/trending_movies_bloc.dart' as _i6;
import 'package:tmdb_movies/models/movie_model.dart' as _i5;
import 'package:tmdb_movies/resources/trending_movies_api_provider.dart' as _i4;
import 'package:tmdb_movies/resources/trending_movies_repository.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTrendingMoviesRepository extends _i1.Fake
    implements _i2.TrendingMoviesRepository {}

class _FakeStreamController<T> extends _i1.Fake
    implements _i3.StreamController<T> {}

class _FakeTrendingMoviesApiProvider extends _i1.Fake
    implements _i4.TrendingMoviesApiProvider {}

class _FakeMovieModel extends _i1.Fake implements _i5.MovieModel {}

/// A class which mocks [TrendingMoviesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrendingMoviesBloc extends _i1.Mock
    implements _i6.TrendingMoviesBloc {
  MockTrendingMoviesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TrendingMoviesRepository get trendingMoviesRepository =>
      (super.noSuchMethod(Invocation.getter(#trendingMoviesRepository),
              returnValue: _FakeTrendingMoviesRepository())
          as _i2.TrendingMoviesRepository);
  @override
  _i3.StreamController<_i5.MovieModel> get movieStream =>
      (super.noSuchMethod(Invocation.getter(#movieStream),
              returnValue: _FakeStreamController<_i5.MovieModel>())
          as _i3.StreamController<_i5.MovieModel>);
  @override
  set movieStream(_i3.StreamController<_i5.MovieModel>? _movieStream) =>
      super.noSuchMethod(Invocation.setter(#movieStream, _movieStream),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.MovieModel> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.MovieModel>.empty())
          as _i3.Stream<_i5.MovieModel>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void fetchTrendingMovies() =>
      super.noSuchMethod(Invocation.method(#fetchTrendingMovies, []),
          returnValueForMissingStub: null);
  @override
  void searchMovies(String? query) =>
      super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValueForMissingStub: null);
  @override
  void initialize() => super.noSuchMethod(Invocation.method(#initialize, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [TrendingMoviesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrendingMoviesRepository extends _i1.Mock
    implements _i2.TrendingMoviesRepository {
  MockTrendingMoviesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TrendingMoviesApiProvider get trendingMoviesApiProvider =>
      (super.noSuchMethod(Invocation.getter(#trendingMoviesApiProvider),
              returnValue: _FakeTrendingMoviesApiProvider())
          as _i4.TrendingMoviesApiProvider);
  @override
  _i3.Future<_i5.MovieModel> fetchTrendingMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchTrendingMovies, []),
              returnValue: Future<_i5.MovieModel>.value(_FakeMovieModel()))
          as _i3.Future<_i5.MovieModel>);
  @override
  _i3.Future<_i5.MovieModel> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue: Future<_i5.MovieModel>.value(_FakeMovieModel()))
          as _i3.Future<_i5.MovieModel>);
}
